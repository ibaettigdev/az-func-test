# Azure Functions profile.ps1
#
# This profile.ps1 will get executed every "cold start" of your Function App.
# "cold start" occurs when:
#
# * A Function App starts up for the very first time
# * A Function App starts up after being de-allocated due to inactivity
#
# You can define helper functions, run commands, or specify environment variables
# NOTE: any variables defined that are not environment variables will get reset after the first execution

# Authenticate with Azure PowerShell using MSI.
# Remove this if you are not planning on using MSI or Azure PowerShell.
if ($env:MSI_SECRET) {
    Disable-AzContextAutosave -Scope Process | Out-Null
    Connect-AzAccount -Identity
}

#Load BetterCollab Config File
try {
    $env:BETTERCOLLAB_CONFIG = Get-Content -Raw -Path C:\home\site\wwwroot\config\config.json
    Write-Information "BetterCollab Config initiated"
}
catch {
    Write-Log $PSItem.ToString()
    Write-Error -Message "Import of BetterCollab Config failed" -ErrorAction Stop
}

#Load PnP Powershell Module
try {
    Import-Module PnP.PowerShell
}
catch {
    Write-Log $PSItem.ToString()
    Write-Error -Message "Import PNP Powershell Module failed" -ErrorAction Stop
}

function Get-ConfigFromEnvironment {
    $config = $env:BETTERCOLLAB_CONFIG | ConvertFrom-Json
}

function Get-TemplateSettings {
    param(
        [string]$templateName
    ) 
    $jsontemplate = Get-Content -Raw -Path "C:\home\site\wwwroot\config\templates\$templateName.json" 
    $templatedata = $jsontemplate | ConvertFrom-Json
    return $templatedata
}

function New-UpdateListItemMessage {
    param(
        [string]$Id,
        [string]$ProvisioningStatus
    ) 
    $ListItem = @{
        "ProvisioningStatus" = $ProvisioningStatus
    } 
    $UpdateListItem = @{
        "Id"         = $Id
        "itemfields" = $ListItem
    }
    return $UpdateListItem
}


function Set-FolderStructure {
    [CmdletBinding()]
    param (
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $connection,
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $body
    )
    process {
        # Ordnerstruktur f√ºr "Freigegebene Dokumente" laden
        $csvPath = Join-Path $env:HOME "site/wwwroot/config/templates/$($body.foldercsv)"
            
        
        $folderStructure1 = Import-Csv -Path $csvPath -Delimiter ';' -Encoding UTF8

        
        # Ordner in der Dokumentbibliothek "Freigegebene Dokumente" erstellen
        Write-Information "[Set-FolderStructure] :: Creating folders in 'Freigegebene Dokumente'..."
        foreach ($folder in $folderStructure1) {
            Resolve-PNPFolder -SiteRelativePath $folder.Path -Connection $connection | Out-Null
        }
    }
}

function Set-PlannerPlanTitle {
    [CmdletBinding()]
    param (
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $body
    )
    process {

        $title = "Aufgaben $($body.Title)"

        return $title
    }   
}